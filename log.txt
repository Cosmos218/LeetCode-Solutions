02/21/2019:
review:
1
26
66
88
122
136
278
283
350

02/22/2019:
review:
14. Longest Common Prefix
344. Reverse String
15. 3Sum
73. Set Matrix Zeroes
49. Group Anagrams

02/23/2019:
review:
104. Maximum Depth of Binary Tree
98. Validate Binary Search Tree

new:
3. Longest Substring Without Repeating Characters
121. Best Time to Buy and Sell Stock
167. Two Sum II - Input array is sorted

02/24/2019:
169. Majority Element
219. Contains Duplicate II
268. Missing Number
414. Third Maximum Number

02/25/2019
448. Find All Numbers Disappeared in an Array
485. Max Consecutive Ones
532. K-diff Pairs in an Array
69. Sqrt(x)
349. Intersection of Two Arrays

03/16/2019 - DP EASY
198. House Robber
121. Best Time to Buy and Sell Stock
70. Climbing Stairs
53. Maximum Subarray

03/19/2019 Array easy
118. Pascal's Triangle
119. Pascal's Triangle II
11. Container With Most Water
16. 3Sum Closest

03/20/2019
67. Add Binary
5. Longest Palindromic Substring
100. Same Tree
50. Pow(x, n)

03/21/2019
450. Delete Node in a BST
102. Binary Tree Level Order Traversal
169. Majority Element
189. Rotate Array
62. Unique Paths

05/21/2019
101. Symmetric Tree
class Solution {
    public boolean isSymmetric(TreeNode root) {
        if (root == null) return true;
        return isSymmetricHelper(root.left, root.right);
    }
    
    private boolean isSymmetricHelper(TreeNode left, TreeNode right) {
        if (left == null && right == null) return true;
        if (left == null || right == null) return false;
        if (left.val != right.val) return false;
        return isSymmetricHelper(left.left, right.right) && isSymmetricHelper(left.right, right.left);
    }
}

05/24/2019
110. Balanced Binary Tree
class Solution {
    public boolean isBalanced(TreeNode root) {
        return helper(root) == -1 ? false : true;
    }
    
    public int helper(TreeNode root) {
        if (root == null) return 0;
        int left = helper(root.left);
        int right = helper(root.right);
        if (left == -1 || right == -1) return -1;
        if (Math.abs(left - right) > 1) return -1;
        return Math.max(left, right) + 1;
    }
}
Key is to use -1 to mark as imbalanced.

111. Minimum Depth of Binary Tree
class Solution {
    public int minDepth(TreeNode root) {
        if (root == null) return 0;
        if (root.left == null && root.right == null) return 1;
        if (root.left == null) return minDepth(root.right) + 1;
        if (root.right == null) return minDepth(root.left) + 1;
        return Math.min(minDepth(root.left), minDepth(root.right)) + 1;
    }
}
Be careful of what is a leaf node -> the corner cases.

112. Path Sum
class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
        if (root == null) return false;
        if (root.left == null && root.right == null && sum == root.val) return true;
        return hasPathSum(root.left, sum - root.val) || hasPathSum(root.right, sum - root.val);
    }
}
Recursion idea; and notice the def of leaf node.

113. Path Sum II
My solution:
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        if (root == null) return new LinkedList();
        if (root.left == null && root.right == null && sum == root.val) {
            List<Integer> list = new LinkedList();
            list.add(root.val);
            List<List<Integer>> result = new LinkedList();
            result.add(list);
            return result;
        }
        return mergeList(root.val, pathSum(root.left, sum - root.val), pathSum(root.right, sum - root.val));
    }
    
    private List<List<Integer>> mergeList(int head, List<List<Integer>> left, List<List<Integer>> right) {
        for (List<Integer> list : right) {
            left.add(list);
        }
        for (List<Integer> list : left) {
            list.add(0, head);
        }
        return left;
    }
}

Only beats 33%.

Another solution:
Pass the reference of the result list to each recursion. When reaching a leaf node with correct sum, add the path to result. Monitor the path(remove elements appropriately).
public class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> path = new ArrayList<>();
        dfs(root, sum, res, path);
        return res;
    }

    public void dfs(TreeNode root, int sum, List<List<Integer>> res, List<Integer> path){
        if(root==null) return;
        path.add(root.val);

        if(root.left==null && root.right==null ){
            if(root.val==sum)
                res.add(new ArrayList<Integer>(path));
            return;
        }
        if(root.left!=null) {
            dfs(root.left,sum-root.val,res,path);
            path.remove(path.size()-1);
        }
        if(root.right!=null) {
            dfs(root.right,sum-root.val,res,path);
            path.remove(path.size()-1);
        }

    }
}

114. Flatten Binary Tree to Linked List
1: Recursion idea:
class Solution {
    public void flatten(TreeNode root) {
        if (root == null) return;
        TreeNode left = root.left;
        TreeNode right = root.right;
        
        flatten(left);
        flatten(right);
        
        root.right = left;
        root.left = null;
        
        TreeNode cur = root;
        while (cur.right != null) cur = cur.right;
        cur.right = right;
    }
}
2. Another solution: post-order traversal

107. Binary Tree Level Order Traversal II
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> result = new LinkedList();
        Queue<TreeNode> que = new LinkedList();
        if (root == null) return result;
        que.add(root);
        while (que.size() > 0) {
            int cnt = que.size();
            List<Integer> list = new LinkedList();
            for (int i = 0; i < cnt; i++) {
                TreeNode temp = que.poll();
                list.add(temp.val);
                if (temp.left != null) que.add(temp.left);
                if (temp.right != null) que.add(temp.right);
            }
            result.add(0, list);
        }
        return result;
    }
}
Idea is right, but be aware of the corner case that root is null.

94. Binary Tree Inorder Traversal
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> result = new LinkedList();
        helper(root, result);
        return result;
    }
    
    private void helper(TreeNode root, List<Integer> result) {
        if (root == null) return;
        helper(root.left, result);
        result.add(root.val);
        helper(root.right, result);
    }
}

96. Unique Binary Search Trees
class Solution {
    public int numTrees(int n) {
        int[] DP = new int[n+1];
        DP[0] = 1;
        DP[1] = 1;
        for (int i = 2; i <=n; i++) {
            for (int j = 1; j <= i; j++) {
                DP[i] += DP[j-1] * DP[i-j];
            }
        }
        return DP[n];
    }
}
Key idea: divide the tree into two halves with different numbers, then the multiplication of the solutions to the both halves is the answer.

05/29
31. Next Permutation
class Solution {
    public void nextPermutation(int[] nums) {
        int pre = Integer.MIN_VALUE;
        int j = nums.length - 1;
        for (; j >= 0 && nums[j] >= pre; j--) {
            pre = nums[j];
        }
        if (j == -1) {
            reverse(nums, 0, nums.length-1);
            return;
        } 
        int i = nums.length - 1;
        for (; nums[i] <= nums[j]; i--) ;
        swap(nums, i, j);
        reverse(nums, j+1, nums.length-1);
    }
    
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    
    private void reverse(int[] nums, int i, int j) {
        while (i < j) {
            swap(nums, i, j);
            i++;
            j--;
        }
    }
}
Key idea: find the first element in non-decreasing order from the tail, swap it to the next larger element and reverse the rest.

206. Reverse Linked List
class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode ptr = head;
        ListNode pre = null;
        while (ptr != null) {
            ListNode temp = ptr.next;
            ptr.next = pre;
            pre = ptr;
            ptr = temp;
        }
        return pre;
    }
}
Same as iterative sample solution

83. Remove Duplicates from Sorted List
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode cur = head;
        while (cur != null && cur.next != null) {
            if (cur.val == cur.next.val) {
                cur.next = cur.next.next;
            } else {
                cur = cur.next;
            }
        }
        return head;
    }
}
Straight forward approad, be attention to corner case like multiple duplicates.
